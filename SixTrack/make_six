#!/bin/bash
#
# Version 1.2 29/08/2005
# CERNLIB/GRAFLIB re-defined
# Forces lf95 for crlibm
# Adds g95 option
# Version 1.3 05/09/2005
# CERNLIB only for SixTrack (not SixTrack_da); CERNGRAF dropped.
# The -naglib option now works for SixTrack_da
# Version 1.4 1/8/2008
# Gets the version and modification date from sixtrack.s
# Corrects the BOINC variable in the Makefile
# make_six clean now exits after the clean just like a make clean
# Version 1.5 11/07/2008
# Adds the deck nwrtbnl and the flags bpm and bnlelens
# Version 2.0 Major change in philosophy; to clarify and document
# all types of make.
# Version 2.1 Adds bignblz option for Frank.
#
# July, 2009. Updated all libraries etc to use Frank's cernlib and X11 libraries
# if they are not present (SLC5!). Also verified correct linking on 32/64 bit
# systems, SLC4 and SLC5.    A NIGHTMARE!!!
# Default: tilt tracking fast crlibm cernlib naglib -bpm -api -da -collimat -bnlelens -cpss -boinc -cr
# and uses the Lahey-Fujitsu lf95 compiler 
# 12th August, 2009. Just changed print_map to print-map. Eric.
# Options:
# da => -tracking -cpss -boinc -collimat -cr +naglib
# collimat => -da -cr -boinc -cpss
# cpss => +cr -collimat -da -cernlib -naglib -boinc
# boinc => +cr +crlibm -collimat -da -cernlib -naglib -cpss
# bpm activates the collection of tracking data for sussix => basic SixTrack
# bnlelens activates the bnl electron lens options possibly => boinc, cr, crlibm
# nag => use f95 instead of LAHEY
# pgf90 => use pgf90
# g95 => use g95
# gfortran => use gfortran
# Version 2.2 August 2010
# Changed to nagfor, changed NAGLIBC for SLC4/5 compatibility
# Version 2.3 27th June, 2011 (including ylevinse collimation mods
# creating a stand alone Makefile and with an hdf5 flag).
# Replaced windows flag by api flag for BOINC
# Added Intel ifort, fio (rounded formatted I/O) flags,
# and an optional optimisation parameter [O|o][0-4].
# A new deck dump for debug. Changed nag to nagfor everywhere.
# Allowed crlibm for NAG nagfor and Intel ifort.
# Version 2.4 January, 2012. merged latest SixTrack production Rev 119
# with all my changes for ifort and FIO.
# Version 2.5 June, 2012.
# Added option SSE2 to try and fix HORRIBLE Intel/AMD performance issues.
# and many other changes for Windows and BOINC including templates.
# Version 2.6. 4th July
# uname -s for Darwin SSE as sse2 or sse3
# and added SSE4.1 and SSE4.2 (just in case)
# Note that SSE$.1 and SSE4.2 are specified as sse41 sse42 (aesthetics)

#Possible debug options, uncomment to use
#set -e #Stop on error - This is sometimes problematic due to the use of $? in the script.
#set -v #Verbose: Print input lines as they are read from the shell script file
#set -x #XTrace:  Print command traces before executing

show_options()
{
    ons="The following selections are ON  :"
    offs="The following selections are OFF :"
    for i in $( seq 1 30 )
    do
        if test ${values[$i]} = "true"
        then
            ons="$ons ${options[$i]}"
        else
            offs="$offs ${options[$i]}"
        fi
    done
    echo "$ons"
    echo "$offs"
}

#Default definitions, to avoid external definitions intruding into generate_makefile()
# in case the variables were not defined here in make_six
FC=""
FCF=""
FCLD=""
FCLMAP=""
CRLIBM=""
CERNLIB=""
gfortran_lib=""
BOINC=""
NAGLIBC=""
BEAMGAS=""
SIXTRACK=""
SIXTRACK_DA=""
generate_makefile() 
{
    # Function generates a Makefile from the input file defined
    # Input argument 1: required, Makefile template
    # Input argument 2: optional (default Makefile) name of created Makefile
    if [ ! -f $1 ]
    then
        echo "ERROR: $1 not existing!"
        exit 1
    fi
    if [ "$2" ]
    then
        outfile=$2
    else
        outfile=Makefile_makesix
    fi
        sed  "s#%%FC%%#${FC}#g" $1 | \
        sed  "s#%%FCF%%#${FCF}#g" | \
        sed  "s#%%FCL%%#${FCL}#g" | \
        sed  "s#%%FCLD%%#${FCLD}#g" | \
        sed  "s#%%FCLMAP%%#${FCLMAP}#g" | \
        sed  "s#%%CRLIBM%%#$CRLIBM#g" | \
        sed  "s#%%CERNLIB%%#${CERNLIB}#g" | \
        sed  "s#%%gfortran_lib%%#$gfortran_lib#g" | \
        sed  "s#%%BOINC%%#$BOINC#g" | \
        sed  "s#%%NAGLIBC%%#$NAGLIBC#g" | \
        sed  "s#%%BEAMGAS%%#$BEAMGAS#g" | \
        sed  "s#%%SIXTRACK%%#$SIXTRACK#g" | \
        sed  "s#%%SIXTRACK_DA%%#$SIXTRACK_DA#g" \
        > $outfile
}

#NOTA BENE! Definitions of cernlib and naglib are reversed
# in the sense that while a "" null value implies option is ON
# the reverse is true for cernlib and naglib
# The 0th option is not used
declare -a options
declare -a values
options=(junk tilt fast crlibm api   cernlib naglib da    collimat cpss  boinc cr    nagfor pgf90 g95   gfortran bpm   beamgas bnlelens bignblz debug hdf5  ifort fio   SSE   lf95  hugenblz stf   bignpart datamods hugenpart)
values=( junk true true true   false true    true   false false    false false false false  false false false    false false   false    false   false false false false false false false    false false    false    false)
#Element 0    1    2    3      4     5       6      7     8        9     10    11    12     13    14    15       16    17      18       19      20    21    22    23    24    25    26       27    28       29       30

# Overide for Darwin
OSTYPE=`uname -s`
# sysname="`fs sysname`"
ARCH64="true"
uname -m | grep 64 > /dev/null
if test $? != 0
then
  ARCH64="false"
fi
sversion=`grep 'data version' sixtrack.s`
echo $sversion
# get string between /....../
sversion=`echo $sversion | sed -e's/.*\/\(.*\)\//\1/'`
# remove the quotes
version=`echo $sversion | sed -e's/.\([0-9]*\).\([0-9]*\).\([0-9]*\)./\1\2\3/'`
moddate=`grep 'data moddate' sixtrack.s`
moddate=`echo $moddate | sed -e's/.*\/\(.*\)\//\1/'`
moddate=`echo $moddate | sed -e's/.\(.*\)./\1/'`
echo $version $moddate

command_lin=$*
# Now we have the default settings
# we have ON
tilt=""
fast=""
crlibm="NULL"
cernlib="cernlib"
naglib="naglib"
# used for ifort only SSE
SSE="NULL"
# and we have OFF
api="api"
da="da"
collimat="collimat"
cpss="cpss"
boinc="boinc"
cr="cr"
nagfor="nagfor"
pgf90="pgf90"
g95="g95"
gfortran="gfortran"
bpm="bpm"
beamgas="beamgas"
bnlelens="bnlelens"
bignblz="bignblz"
hugenblz="hugenblz"
stf="stf"
bignpart="bignpart"
datamods="datamods"
hugenpart="hugenpart"
debug="debug"
hdf5="hdf5"
ifort="ifort"
lf95="lf95"
fio="fio"

while test $# != 0
do
    case $1 in
        clean) echo "Cleaning crlibm, astuce and dafor, Makefile_makesix and removing ALL SixTrack_* directories."
            rm -f SixTrack
            rm -f *.o dafor astuce
            rm -f crlibm/crlibm.a crlibm/*.o
            rm -rf SixTrack_*
            rm -rf Makefile_makesix
            exit
            ;;
	#Options to switch things OFF
        -tilt) tilt="tilt"
            values[1]=false
            ;;
        -fast) fast="fast"
            values[2]=false
            ;;
        -crlibm) crlibm="crlibm"
            values[3]=false
            ;;
        -api) api="api"
            values[4]=false
            ;;
        -cernlib) cernlib=""
            values[5]=false
            ;;
        -naglib) naglib=""
            values[6]=false
            ;;
        -da) da="da"
            values[7]=false
            ;;
        -collimat) collimat="collimat"
            values[8]=false
            ;;
        -cpss) cpss="cpss"
            values[9]=false
            ;;
        -boinc) boinc="boinc"
            values[10]=false
            ;;
        -cr) cr="cr"
            values[11]=false
            ;;
        -nag) nagfor="nagfor"
            values[12]=false
            ;;
        -pgf90) pgf90="pgf90"
            values[13]=false
            ;;
        -g95) g95="g95"
            values[14]=false
            ;;
        -gfortran) gfortran="gfortran"
            values[15]=false
            ;;
        -bpm) bpm="bpm"
            values[16]=false
            ;;
        -beamgas) beamgas="beamgas"
            values[17]=false
            ;;
        -bnlelens) bnlelens="bnlelens"
            values[18]=false
            ;;
        -bignblz) bignblz="bignblz"
            values[19]=false
            ;;
        -debug) debug="debug"
            values[20]=false
            ;;
        -hdf5) hdf5="hdf5"
            values[21]=false
            ;;
        -ifort) ifort="ifort"
            values[22]=false
            ;;
        -fio) fio="fio"
            values[23]=false
            ;;
	#-SSE) : [24] (see below)
        -lf95) lf95="lf95"
            values[25]=false
            ;;
        -hugenblz) hugenblz="hugenblz"
            values[26]=false
            ;;
	-stf) stf="stf"
	    values[27]=false
	    ;;
        -bignpart) bignpart="bignpart"
            values[28]=false
            ;;
	-datamods) datamods="datamods"
            values[29]=false
            ;;
	-hugenpart) hugenpart="hugenpart"
            values[30]=false
            ;;
	
	#Options to switch things ON
        tilt) tilt=""
            values[1]=true
            ;;
        fast) fast=""
            values[2]=true
            ;;
        crlibm) crlibm=""
            values[3]=true
            ;;
        api) api=""
            values[4]=true
            ;;
        cernlib) cernlib="cernlib"
            values[5]=true
            ;;
        naglib) naglib="naglib"
            values[6]=true
            ;;
        da) da=""
            values[7]=true
            ;;
        collimat) collimat=""
            values[8]=true
            ;;
        cpss) cpss=""
            values[9]=true
            ;;
        boinc) boinc=""
            values[10]=true
            ;;
        cr) cr=""
            values[11]=true
            ;;
        nagfor) nagfor=""
            values[12]=true
            ;;
        pgf90) pgf90=""
            values[13]=true
            ;;
        g95) g95=""
            values[14]=true
            ;;
        gfortran) gfortran=""
            values[15]=true
            ;;
        bpm) bpm=""
            values[16]=true
            ;;
        beamgas) beamgas=""
            values[17]=true
            ;;
        bnlelens) bnlelens=""
            values[18]=true
            ;;
        bignblz) bignblz=""
            values[19]=true
            ;;
        debug) debug=""
            values[20]=true
            ;;
        hdf5) hdf5=""
            values[21]=true
            ;;
        ifort) ifort=""
            values[22]=true
            ;;
        fio) fio=""
            values[23]=true
            ;;
	#SSE) : [24] (see below)
        lf95) lf95=""
            values[25]=true
            ;;
	hugenblz) hugenblz=""
            values[26]=true
            ;;
	stf) stf=""
	    values[27]=true
	    ;;
        bignpart) bignpart=""
            values[28]=true
            ;;
	datamods) datamods=""
            values[29]=true
            ;;
	hugenpart) hugenpart=""
	    values[30]=true
            ;;
	
	#Compiler flags are special
	sse2) SSE=sse2
	    values[24]=true
	    ;;
	sse3) SSE=sse3
	    values[24]=true
	    ;;
	sse41) SSE=sse4.1
	    values[24]=true
	    ;;
	sse42) SSE=sse4.2
	    values[24]=true
	    ;;
	O) myopt=O
	    ;;
	O0) myopt=O0
	    ;;
	o0) myopt=o0
	    ;;
	O1) myopt=O1
	    ;;
	o1) myopt=o1
	    ;;
	O2) myopt=O2
	    ;;
	o2) myopt=o2
	    ;;
	O3) myopt=O3
	    ;;
	o3) myopt=o3
	    ;;
	O4) myopt=O4
	    ;;
	o4) myopt=o4
	    ;;
	
        *) echo "Illegal option $1"
            exit 1
            ;;
    esac
    shift
done
# Here we do some checking for valid/invalid combinations
if test "$da" = "" -a "$collimat" = ""
then
  show_options
  echo "     INVALID options selected:"
  echo "     Select only one of da or collimat!"
  exit 1
fi
if test "$fio" = ""
then
  echo "Lahey lf95 does NOT support fio 2003 rounding!"
  exit 1
fi
if test "$boinc" = ""
then
  # BOINC includes the CPSS options
  cpss=""
  values[9]=true
fi
if test "$beamgas" = ""
then
    if test "$collimat" != ""
    then
        show_options
        echo "     INVALID options selected:"
        echo "     beamgas requires collimat"
        exit 1
    fi
    if test "$bignblz" = ""
    then
	show_options
        echo "     INVALID options selected:"
        echo "     beamgas is not compatible with bignblz"
        exit 1
    fi
    if test "$hugenblz" = ""
    then
	show_options
        echo "     INVALID options selected:"
        echo "     beamgas is not compatible with hugenblz"
        exit 1
    fi
    BEAMGAS="beamgas.o"
else
    BEAMGAS=""
fi
if test "$bignblz" = ""
then
    if test "$hugenblz" = ""
    then
	show_options
        echo "     INVALID options selected:"
        echo "     bignblz and hugenblz are not compatible, please use only one of them!"
        exit 1
    fi
fi
if test "$hdf5" = ""
then
    if test "$collimat" != ""
    then
        show_options
        echo "     INVALID options selected:"
        echo "     hdf5 is only for the tracks-file in collimation studies"
        echo "     -> hdf5 makes no sense without collimat"
        exit 1
    fi
    BEAMGAS="beamgas.o" #The hdf5 code is contained in beamgas.o -- look in ast_mask/beamgas.ast
fi
if test "$da" = "" -o "$collimat" = ""
then
    if test "$cpss" = ""
    then
        show_options
        echo "     INVALID options selected:"
        echo "     BOINC/CPSS are for tracking only (NOT da nor collimat)"
        exit 1
    fi
    if test "$bpm" = ""
    then
        show_options
        echo "    INVALID options selected:"
        echo "    bpm is for tracking only and not for desktops!"
        exit 1
    fi
fi
if test "$da" = "da"
then
    naglib=""
    values[6]=false
fi
if test "$crlibm" = "NULL"
then
  # It has not been specified!
  if test "$collimat" = ""
  then
    # Turn it off for collimation
    crlibm="crlibm"
    values[3]=false
    echo "Option crlibm turned OFF for collimation"
  else
    # Turn it on
    crlibm=""
    values[3]=true
    echo "Option crlibm turned ON"
  fi
fi
if test "$collimat" = "" -a "$crlibm" = ""
then
    #Collimat is not really compatible with collimation
    echo
    echo -e "\e[91m ***** WARNING ***** \e[39m"
    echo -e "\e[91mTrying to build SixTrack with both\e[39m"
    echo -e "\e[91mCOLLIMAT and CRLIBM \e[39m"
    echo -e "\e[91mThis will most likely NOT work correctly \e[39m"
    echo
    echo -e "\e[91mHit ENTER to continue or ^C to cancel. \e[39m"
    read junk
fi

if test "$collimat" != "" -a "$cpss" = ""
then
    # We will build for windows and Linux boinc and cpss 
    # Note that boinc forces the cpss flag anyway
    # The api flag is now used to force the real BOINC api.
    # and we turn off cernlib
    cernlib=""
    values[5]=false
    echo "Option cernlib turned OFF"
    crlibm=""
    values[3]=true
    echo "Option crlibm turned ON"
    cr=""
    values[11]=true
    echo "Option Checkpoint/Restart turned ON"
fi
if test "$collimat" = "" -a "$cr" = ""
then
    echo "Options collimat and cr are incompatible - please use only one."
    exit 1
fi
if test "$bignpart" == ""
then
    if test "$collimat" = ""
    then
	echo "Options collimat and bignpart are incompatible - please use only one."
	exit 1
    fi
    if test "$bnlelens" = ""
    then
	echo "Options bnlelens and bignpart are incompatible - please use only one."
	exit 1
    fi
    if test "$stf" != ""
    then
	echo "Option bignpart requires option stf."
	exit 1
    fi
fi
if test "$hugenpart" == ""
then
    if test "$bignpart" == ""
    then
	echo "Options bignpart and hugenpart are incompatible - please use only one."
	exit 1
    fi
    if test "$stf" != ""
    then
	echo "Option hugenpart requires option stf."
	exit 1
    fi
    if test "$datamods" != ""
    then
	echo "Option hugenpart requires option datamods."
	exit 1
    fi
fi

# if test "$stf" = "" -a "$cr" = ""
# then
#     show_options
#     echo "     INVALID options selected:"
#     echo "     stf and cr are not compatible, please use only one of them!"
#     exit 1
# fi
if test "$stf" = "" -a "$bnlelens" = ""
then
    show_options
    echo "     INVALID options selected:"
    echo "     stf and bnlelens are not compatible, please use only one of them!"
    exit 1
fi

# Set up compiler
if test "$nagfor" = ""
then
  export FC="nagfor"
  if test "$myopt" = ""
  then
    myopt="O"
  fi
# SHOULD I USE -float-store ???? Doesn't seem to be necessary..........
# Results appear to be different??? (better NOT to use)
#PRO#  export FCF="-$myopt -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=full"
# export FCF="-S -$myopt -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=full"
  #export FCF="-$myopt -C=undefined -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=full -g90"
  ####export FCF="-$myopt -float-store -$myopt -C=undefined -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=full -g90"
# export FCF="-$myopt -C=all -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=full -g90"
# export FCF="-float-store -$myopt -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=full -g90"
  export FCF="-$myopt -abi=32 -dusty -dcfuns -ieee=full -g90 -w=ulv -w=uparam"
#  export FCF="-$myopt -abi=32 -dusty -maxcontin=60 -ieee=full -g90" ## Former default, could not build plato
# The ieee=nonstd is INCOMPATIBLE with abi=32!!!
# export FCF="-$myopt -abi=32 -dusty -maxcontin=60 -dcfuns -ieee=nonstd -g90"
  export FCL="-Bstatic -abi=32"
  export FCLD="-abi=32"
  export NAGLIBC="-L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c"
elif test "$pgf90" = ""
then
  export FC="pgf90"
  if test "$myopt" = ""
  then
    myopt="fast"
  fi
  export FCF="-$myopt -m32 -Kieee"
  export FCF="-g -$myopt -m32 -Kieee"
### The -Mnoflushz gives different results for bnl test case (thck6d)???
###  export FCF="-Mnoflushz -fast -$myopt -m32 -Kieee"
  export FCL="-Bstatic -$myopt -m32"
  export FCLD="-m32"
elif test "$g95" = ""
then
  export FC="g95"
  if test "$myopt" = ""
  then
    myopt="O"
  fi
  export FCF="-Wa,--32 -g -fno-second-underscore -funroll-loops"
  if test "$MACHTYPE" = "i586"
  then
    export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc_eh"
    export FCLD="-m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc_eh"
  else
    export FCL="-static -m32 -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c"
    export FCLD="-m32 -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c"
  fi
elif test "$gfortran" = ""
then
  export FC="gfortran"
  if test "$myopt" = ""
  then
    myopt="O4"
  fi
#  export FCF=" -frecord-marker=4 -$myopt -m32 -g -fno-second-underscore -funroll-loops -mfpmath=sse -msse2 -ffpe-trap=invalid,zero,overflow,underflow -fcheck=all -O0 -g"
  export FCF=" -frecord-marker=4 -$myopt -m32 -g -fno-second-underscore -funroll-loops -mfpmath=sse -msse2"
  export FCL="-static -m32"
  export FCLD="-m32"
elif test "$lf95" = ""
then
  export FC="lf95"
  if test "$myopt" != "" -a "$myopt" != "o0"
  then
    echo "Ignoring $myopt because it produces wrong results!!!" 
  fi
  myopt="o0"
  export FCF="--$myopt --tp -Wa,--32"
  export FCL="-static -m32"
  export FCLD="-m32"
  if [[ "$MACHTYPE" == *x86_64* ]]
  then
    ls -l /usr/lib/gcc/x86_64-redhat-linux/4.1.1/32/libgcc_eh.a > /dev/null 2>&1
    if test $? -ne 0
    then
      export FCL="-static -m32"
      export FCLD="-m32"
    else
      export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lgcc_eh"
      export FCLD="-m32 -L/usr/lib/ -lc -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lgcc_eh"
    fi
  elif [[ "$MACHTYPE" == *i386* || "$MACHTYPE" == *i486* ]]
  then
    ls -l /usr/lib/gcc/i386-redhat-linux/4.1.1/libgcc_eh.a > /dev/null 2>&1
    if test $? -ne 0
    then
      export FCL="-static -m32"
      export FCLD="-m32"
    else
      export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i386-redhat-linux/4.1.1 -lgcc_eh"
      export FCLD="-m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i386-redhat-linux/4.1.1 -lgcc_eh"
    fi
  elif test "$MACHTYPE" = "i586"
  then
      export FCL="-static -m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc_eh"
      export FCLD="-m32 -L/usr/lib/ -lc -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc_eh"
  else
    echo "Unknow MACHTYPE $MACHTYPE"
    exit 2
  fi
else
  if test "$ifort" != ""
  then
    echo "Using ifort by default"
    ifort=""
    values[22]=true
  fi 
  export FC="ifort"
  if test "$myopt" = ""
  then
    myopt="O"
  fi
  if test "$cpss" = "" -o "$crlibm" = ""
  then
# We MUST HAVE the numeric portability (and my default architecture e.g. PIII)
# Because of performance on AMD etc we allow sse2/sse3 option to optimise
# and now SSE4.1 and SSE4.2
#
# and use FTZ for testing (null for production)
#   FTZ="-no-ftz"
    FTZ=""
    if test "$SSE" = "NULL"
    then
    # Code which works on ANY ia32 WITHOUT using SSE3 though
      export FCF="$FTZ -$myopt -mia32 -fp-model source -fp-model strict -fp-model no-except"
    else
# and now use sse2 or sse3
      if test "$OSTYPE" = "Darwin"
      then
        export FCF="$FTZ -m32 -mmacosx-version-min=10.5 -$myopt -fp-model source -fp-model strict -fp-model no-except"
      else
        export FCF="$FTZ -$myopt -m$SSE -fp-model source -fp-model strict -fp-model no-except"
      fi
    fi
  else
    # Just use the defaults for the compile host
    export FCF="$FTZ -$myopt -m32"
  fi
  export FCL="-static -m32"
  export FCLD="-m32"
fi
if test "$hdf5" = ""
then
    # H5ROOT is the location where you find the  HDF5 libs and include files for your compiler...
    # Seems the hdf5.mod files must be created with the EXACT same compiler.
    if test "$gfortran" = ""
    then
        gccver=`gcc -dumpversion`
        if [[ $gccver == 4\.4\.* ]]
        then
            # this was compiled for gcc 4.4.7-11 (standard on lxplus, Feb 2015)
	    export H5ROOT="/afs/cern.ch/user/r/rkwee/public/hdf5/hdf5-1.8.14"
	    # Alternative:
            # export H5ROOT="/afs/cern.ch/work/k/kyrsjo/public/codes/hdf5/build-static-lxplus/install"
	elif [[ $gccver == 4\.8\.* ]]
	then
            # this was compiled for gcc 4.8.2 (SLC7, Feb 2015)
            export H5ROOT="/afs/cern.ch/work/k/kyrsjo/public/codes/hdf5/build-static/install"
	else
            echo "ERROR: hdf5 is not available in exactly the same compiler version as gfortran, please disable hdf5. Exiting .."
	    exit 1
	fi
    else
        echo "ERROR: hdf5 not available, please disable hdf5."
	echo "hdf5 _MUST_ be compiled with EXACTLY the same compiler version as gfortran was compiled. Exiting"
        exit 1
    fi
    export FCF="$FCF -I${H5ROOT}/include"
fi
# Here we do some checking for SSE options now we know the compiler
if test "$SSE" != "NULL"
then
  if test "$ifort" != "" -o "$OSTYPE" = "Darwin"
  then
    echo "Ignoring $SSE option (valid for only ifort and default for MAC)"
    SSE="NULL"
    values[24]=false
  fi
fi

if test "$MACHTYPE" = "i586"
then
    export FCLMAP="$FCL"
else
    if "$nagfor" != ""; then
	export FCLMAP="-Wl,--print-map $FCL"
    else
	export FCLMAP="$FCL"
    fi
fi

if test "$OSTYPE" = "Darwin"
then
  # allows running of sixtrack under Macintosh System 10
  echo "MAC setup"
  # NO STATIC linking? on Darwin
  export FCL="-m32 -mmacosx-version-min=10.5"
  export FCLD="-m32 -mmacosx-version-min=10.5"
  echo "Operating system: $OSTYPE"
#  FIX up with Frank's fix for 4.6!!!!
  export gfortran_lib="/sw/lib/gcc4.4/lib/libgfortran.a"
  if test "$da" != ""
  then
    export FCLMAP="-Wl,-map,sixtrack.map $FCL"
  else
    export FCLMAP="-Wl,-map,sixtrack_da.map $FCL"
  fi
fi

ename="SixTrack_${version}_"
if test "$cernlib" != ""
then
    ename=$ename"cernlib_"
fi
if test "$crlibm" = ""
then
    ename=$ename"crlibm_"
fi
if test "$da" = ""
then
    ename=$ename"da_"
elif test "$collimat" = ""
then
    ename=$ename"coll_"
elif test "$bnlelens" = ""
then
    ename=$ename"bnl_"
elif test "$bpm" = ""
then
    ename=$ename"bpm_"
fi
if test "$beamgas" = ""
then
    ename=$ename"beamgas_"
fi
if test "$hdf5" = ""
then
    ename=$ename"h5_"
fi
ename=$ename$FC
if test "$fio" = ""
then
  ename=$ename"_fio"
fi
if test "$boinc" = ""
then
    ename=$ename"_boinc"
elif test "$cpss" = ""
then
    ename=$ename"_cpss"
elif test "$cr" = ""
then
    ename=$ename"_cr"
fi
if test "$bignblz" = ""
then
    ename=$ename"_bignblz"
fi
if test "$hugenblz" = ""
then
    ename=$ename"_hugenblz"
fi
if test "$stf" = ""
then
    ename=$ename"_stf"
fi
if test "$bignpart" = ""
then
    ename=$ename"_bignpart"
fi
if test "$hugenpart" = ""
then
    ename=$ename"_hugenpart"
fi


if test "$debug" = ""
then
    ename=$ename"_debug"
fi
if test "$api" = ""
then
    ename=$ename"_api"
fi
if test "$ifort" = ""
then
  if test "$SSE" != "NULL"
  then
      ename=$ename"_$SSE"
  fi
fi
ename=${ename}_$myopt
export ename

#Test that the sixtrack.s is sane
echo ""
echo "Running 'gawk -f beauty/count.awk sixtrack.s' to check sanity of astuce directives in sixtrack.s:"
if ! gawk -f beauty/count.awk sixtrack.s; then
    echo -e "\e[5m\e[41m WARNING: ASTUCE if/ei doesn't match up in sixtrack.s \e[49m\e[0m"
    echo "This most likely means that you added or removed a +if or +ei,"
    echo " but forgot about its partner."
    echo "You may also just be missing the command 'gawk' (GNU AWK),"
    echo " needed to run this script."
else
    echo "--> count.awk completed without errors."
fi
echo "Running 'gawk -f beauty/check_astuce_ifs.awk sixtrack.s' to check sanity of astuce directives in sixtrack.s:"
if ! gawk -f beauty/check_astuce_ifs.awk sixtrack.s; then
    echo -e "\e[5m\e[41m WARNING: ASTUCE if has too many arguments in sixtrack.s \e[49m\e[0m"
    echo "This most likely means that you have an extra space in an astuce +if statement"
    echo "You may also just be missing the command 'gawk' (GNU AWK),"
    echo " needed to run this script."
else
    echo "--> check_astuce_ifs.awk completed without errors."
fi
echo "Running 'gawk -f beauty/count.awk plato_seq.s' to check sanity of astuce directives in plato_seq.s:"
if ! gawk -f beauty/count.awk plato_seq.s; then
    echo -e "\e[5m\e[41m WARNING: ASTUCE if/ei doesn't match up in plato_seq.s \e[49m\e[0m"
    echo "This most likely means that you added or removed a +if or +ei,"
    echo " but forgot about its partner."
    echo "You may also just be missing the command 'gawk' (GNU AWK),"
    echo " needed to run this script."
else
    echo "--> count.awk completed without errors."
fi
echo "Running 'gawk -f beauty/check_astuce_ifs.awk plato_seq.s' to check sanity of astuce directives in sixtrack.s:"
if ! gawk -f beauty/check_astuce_ifs.awk plato_seq.s; then
    echo -e "\e[5m\e[41m WARNING: ASTUCE if has too many arguments in plato_seq.s \e[49m\e[0m"
    echo "This most likely means that you have an extra space in an astuce +if statement"
    echo "You may also just be missing the command 'gawk' (GNU AWK),"
    echo " needed to run this script."
else
    echo "--> check_astuce_ifs.awk completed without errors."
fi


#Print final message before actually starting the build
echo ""
echo "We are about to build $ename"
echo "last modified on $moddate"
echo "with the following options:"
echo ""
echo "Note that building for windows/boinc/cpss will also"
echo "build for Linux as a validity check."
echo ""
show_options
echo ""
echo "And compiler options:"
echo "FC   = '$FC'"
echo "FCF  = '$FCF'"
echo "FCL  = '$FCL'  (For linking SixTrack)"
echo "FCLD = '$FCLD' (For linking astuce and dafor)"
echo ""
echo "Hit any key to continue, or CTRL/C to exit."
read junk

echo ""
echo "   ********************************************************************************"
echo "   *** PLEASE NOTE: 'make_six' is obsolete; consider using 'cmake_six' instead! ***"
echo "   *** See Doc/building_sixtrack for more information                           ***"
echo "   ********************************************************************************"
echo ""
echo "Hit any key to continue, or CTRL/C to exit."
read junk


# Make astuce and dafor (required for sixvefox and sixscfox)
generate_makefile Makefile_makesix.template
make -f Makefile_makesix astuce
make -f Makefile_makesix dafor
# Create and INITIALISE the build directory
mkdir -p "$ename"
cd "$ename"
rm -rf *
for dots in dabnew  lielib  sixtrack plato_seq
do
    ln -sf ../${dots}.s ${dots}.s
done
# Use only necessary .ast (and .f later)
if test "$da" = ""
then
    export FORS='sixda sixsc sixscfox dabnew lielib beamgas datamods'
else
    export FORS='track sixve sixvefox dabnews lielib beamgas plato_seq datamods'
fi
rm -f *.ast
for i in $FORS
do
    cp ../ast_mask/$i.ast .
done
# Update the .ast flags based on options
echo "Deleting un-used flags and decks from .ast files..."
for opt in "$crlibm" "$tilt" "$fast" "$bpm" "$beamgas" "$collimat" "$bnlelens" "$cr" "$boinc" "$nagfor" "$bignblz" "$debug" "$hdf5" "$fio" "$lf95" "$hugenblz" "$stf" "$bignpart" "$datamods" "$hugenpart"
do
    #echo "opt=" $opt
    if test "$opt" != ""
    then
        for i in `ls *.ast`
        do
	    #echo "i="$i
	    #cp $i $i.bak
            sed -e 's/\(^df .*\), *'$opt' *,\(.*\)/\1,\2/' \
                -e 's/\(^df .*\), *'$opt' *$/\1/' \
                -e 's/\(^df  *'$opt' *,\)\(.*\)/df \2/'  \
                -e 's/\(^df  *'$opt' *$\)/df/'         \
                $i > tmp$$
            if test $? -ne 0
            then
                echo "Problem updating the definitions in $i !!!"
                exit 3
            fi
            mv tmp$$ $i

	    #diff $i.bak $i
	    #rm $i.bak
        done
    fi
done
# Delete unneeded decks from the .ast based on options
for opt in "$collimat" "$cr" "$cernlib" "$naglib" "$bnlelens" "$debug" "$datamods"
do
    if test "$opt" != ""
    then
        case $opt in
            collimat) pattern="nwrtcoll"
                ;;
            bnlelens) pattern="nwrtbnl"
                ;;
            cr)       pattern="checkpt"
                ;;
            cernlib)  pattern="plotdumy"
                ;;
            naglib)   pattern="nagdumy"
                ;;
            debug)   pattern="dumps"
                ;;
	    datamods) pattern="datamods"
		;;
        esac
        for i in `ls *.ast`
        do
            sed -e '/^e  *'$pattern'/d' $i > tmp$$
            if test $? -ne 0
            then
                echo "Problem deleting decks in $i !!!"
                exit 3
            fi
            mv tmp$$ $i
        done
    fi
done
echo "Done!"

# Then generate the .f files
echo "Running ASTUCE and DAFOR..."
for i in $FORS
do
    ../astuce < $i.ast
    if test "$i" = "sixvefox" -o "$i" = "sixscfox" -o "$i" = "sixda"
    then
        ln -s -f $i"n.f" fort.1
        ../dafor
        rm -f fort.1 fort.3
        mv fort.2 $i"n.f"
    fi 
    if test -s $i.f
    then
        diff $i"n.f" $i.f > /dev/null
        if test $? -ne 0
        then
            mv $i"n.f" $i.f
        else
            rm $i"n.f"
        fi
    else
        mv $i"n.f" $i.f
    fi
done
# Now sort out cernlib
if test "$cernlib" != ""
then
    if [[ "$OSTYPE" == Linux ]]
    then
        if test -f /cern/pro/bin/cernlib -a -f /usr/X11R6/lib/libX11.a
        then
            if [[ "$MACHTYPE" == *i386* || "$MACHTYPE" == *i486* ]]
            then
                export CERNLIB="`cernlib -u graflib packlib_noshift kernlib_noshift` -L/usr/lib/gcc/i386-redhat-linux/3.4.6 -lg2c -L/usr/lib -lpthread"
            elif [[ "$MACHTYPE" == *x86_64* ]]
            then
                export CERNLIB="`cernlib -u graflib packlib_noshift kernlib_noshift` -L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c -L/usr/lib -lpthread"
            else
                echo "Unknown MACHTYPE $MACHTYPE!!"
                exit 2
            fi
        else
            if [[ "$MACHTYPE" == *i386* || "$MACHTYPE" == *i486* ]]
            then
                export CERNLIB="-L../lib32 -lgraflib -lgrafX11 -lpacklib_noshift -lkernlib_noshift -lg2c -lX11 -lxcb -lXau -lXdmcp -L/usr/lib/gcc/i386-redhat-linux/3.4.6 -ldl -lpthread -lgcc_eh"
            elif test "$MACHTYPE" = "i586"
            then
                export FCLMAP="-static -m32"
                export CERNLIB="-L/usr/lib/cernlib/2006/lib/ -lgraflib -lgrafX11 -lpacklib -lkernlib -L/usr/lib/gcc/i586-redhat-linux/3.4.6 -lg2c -L/usr/lib -lX11 -lxcb -lxcb-glx -lXau -lXdmcp -ldl" 
                export CERNLIB+=" -lpthread -L/usr/lib/gcc/i586-redhat-linux/4.4.0 -lgcc -lgcc_eh"
                if test "$gfortran" != ""
                then
                    export CERNLIB+=" -lgfortran"
                fi
            elif [[ "$MACHTYPE" == *x86_64* ]]
            then
		export CERNLIB="-L../lib32 -lgraflib -lgrafX11 -lpacklib_noshift -lkernlib_noshift -lg2c -lX11 -lxcb -lXau -lXdmcp -ldl -lpthread -lgcc_eh"
                if test "$hdf5" = ""
                then
                    export CERNLIB="-Wl,--start-group -I${H5ROOT}/include -L${H5ROOT}/lib -lszip -lhdf5 -lhdf5_hl -lhdf5_fortran -lhdf5_f90cstub -lhdf5_hl_fortran -lz -lm -Wl,--end-group  $CERNLIB"
                fi
            else
                echo "Unknown MACHTYPE $MACHTYPE!!"
            fi
        fi
    elif test "$OSTYPE" = "Darwin"
    then
        export CERN_ROOT="/sw"
        export CERNLIB="`$CERN_ROOT/bin/cernlib -u graflib packlib kernlib` -lpthread"
    else
        echo "Unrecognised OSTYPE $OSTYPE (not Linux or Darwin)"
        exit 2
    fi
fi

# and naglib
if test "$naglib" != ""
then
  if test "$ARCH64" = "false"
  then
    #SLC4 32 machine
    export NAGLIB="/afs/cern.ch/sw/nag/mark18/lnx/fllux18dg/libnag.a  -L/usr/lib/gcc/i386-redhat-linux/3.4.3 -lg2c -L/usr/lib -lpthread"
  else
    #SLC4 64 machine
    export NAGLIB="/afs/cern.ch/sw/nag/mark18/lnx/fllux18dg/libnag.a  -L/usr/lib/gcc/x86_64-redhat-linux/3.4.3/32 -lg2c -L/usr/lib -lpthread"
### echo "NAGLIB cannot be found for your machine. SixTrack_da linking will fail!"
  fi
fi
# and crlibm
if test "$crlibm" = ""
then
  export CRLIBM="crlibm/crlibm.a"
  mkdir -p crlibm
  cp -r ../crlibm/* crlibm
  cd crlibm
# and fix the Makefile_makesix.template
  sed  -e 's/%%FC%%/'"${FC}"'/g' \
       -e 's/%%FCF%%/'"${FCF}"'/g' \
    Makefile_makesix.template > Makefile_makesix
  echo "Making crlibm." 
  make -f Makefile_makesix clean
  make -f Makefile_makesix crlibm.a
  if test $? -ne 0
  then
    echo "Failed to make crlibm!!! Please inform McIntosh."
    exit 4
  fi
  cd ..

  #roundctl library, now split up from CRLIBM:
  export CRLIBM="$CRLIBM roundctl/roundctl.a"
  mkdir -p roundctl
  cp -r ../roundctl/* roundctl
  cd roundctl
  sed  -e 's/%%FC%%/'"${FC}"'/g' \
       -e 's/%%FCF%%/'"${FCF}"'/g' \
       Makefile_makesix.template > Makefile_makesix
  echo "Making roundctl."
  make -f Makefile_makesix clean
  make -f Makefile_makesix roundctl.a
  if test $? -ne 0
  then
    echo "Failed to make roundctl!!!"
    exit 4
  fi
  cd ..
fi
if test "$da" = ""
then
  # Fix up the Makefile
  if test "$naglib" != ""; then
    #These "hard" specifications of -L is probably a bad idea,
    # but let's at least disable it when NAGLIB isn't avaiable!
    export NAGLIBC="-L/usr/lib/gcc/x86_64-redhat-linux/3.4.6/32 -lg2c"
  else
    export NAGLIBC=""
  fi 
  SIXTRACK_DA=$ename
  SIXTRACK="dummy"
  generate_makefile ../Makefile_makesix.template Makefile_makesix
  # remove an existing executable
  rm -f $ename
  make -f Makefile_makesix $ename
else
# and now fix up the Makefile.boinc.template
# for the build (local) using /afs/cern/.ch/project/sixtrack/boinc_linux32
# containing boinc api/lib/zip libraries and associated .h files.
# thankyou Riccardo/Igor August 2013.
    SIXTRACK=$ename
  if test "$boinc" = ""
  then
    if test "$api" = ""
    then
      export BOINC=""
    else
      export BOINC="myboinc.o"
      cp ../myboinc.f .
    fi
    echo "Generate makefile for BOINC"
    generate_makefile ../Makefile_makesix.boinc.template Makefile_makesix.boinc
# and try the same for MACs
    generate_makefile ../Makefile_makesix.boinc.mac.template Makefile_makesix.boinc.mac
    generate_makefile ../make_makesix_mac.template make_makesix_mac
  fi
  #YIL addition: creating beamgas.f90 instead of beamgas.f
  mv beamgas.f beamgas.f90
  # mv sixve.f sixve.f90
  # mv track.f track.f90
  generate_makefile ../Makefile_makesix.template Makefile_makesix
 # do the setup for Windows anway
  echo ""
  echo "Setting up for Windows (as well)"
  echo ""
  cp ../boinc_api_fortran.cpp.windows .  
  cp ../boinc_api_fortran.cpp .  
  cp ../boinc_zipitall.cpp .  
  cp ../compile_fortran.bat.template .
  cp ../link_intel.bat.template .
  cp ../make_makesix_windows.template .
  if test "$api" != ""
  then
    cp ../myboinc.f .
  fi
  ARCH="IA32"
  if test "$SSE" = "sse2"
  then
    ARCH="sse2"
  fi
  if test "$SSE" = "sse3"
  then
    ARCH="sse3"
  fi
  if test "$SSE" = "sse4.1"
  then
    ARCH="sse4.1"
  fi
  if test "$SSE" = "sse4.2"
  then
    ARCH="sse4.2"
  fi
  sed -e's/%%ARCH%%/'$ARCH'/g' compile_fortran.bat.template > tmp$$
  mv tmp$$ compile_fortran.bat
  sed -e's/%%SIXTRACK%%/'$ename'/g' make_makesix_windows.template > tmp$$
  mv tmp$$ make_makesix_windows
  sed -e's/%%SIXTRACK%%/'$ename'/g' link_intel.bat.template > tmp$$
  mv tmp$$ link_intel.bat
  if test "$api" != ""
  then
    sed -e's/%%MYBOINC%%/myboinc.obj/g' link_intel.bat > tmp$$
  else
    sed -e's/%%MYBOINC%%//g' link_intel.bat > tmp$$
  fi
  mv tmp$$ link_intel.bat
  echo ""
  # remove an existing executable
  rm -f $ename
  # and (at last) do a make API or not
  if test "$api" != ""
  then
    make -f Makefile_makesix $ename
  else
    make -f Makefile_makesix.boinc
  fi
fi
echo "       "
echo "$0 : $command_line"
echo "tried to build $ename in the directory with the same name."
echo ""
show_options
echo ""
if test -s "$ename"
then
  echo -e "\e[92mIt appears to have completed successfully.\e[39m"
  # and a link for Frank
  cd ..
  if test "$da" != ""
  then
    ln -sf $ename/$ename SixTrack 
  else
    ln -sf $ename/$ename SixTrack_da
  fi
  cd $ename
else
  echo -e "\e[91mIt appears to have failed!!!\e[39m"
  exit 2
fi
# Note that selecting boinc has forced cpss
#if test "$cpss" = ""
#then
#  if test "$api" = ""
#  then
#    make clean
#    cd crlibm
#    make clean
#    cd ..
#    echo ""
#  fi
echo "The $ename directory can now be taken to Windows/MacOS or BOINC server."
echo "but you may want to 'cd $ename;make clean;cd crlibm; make clean; cd ../..'"
#fi
