+dk scatter
! Deck for the scattering routines implemented in the SCATTER block

module scatter

    use floatPrecision
    use mathlib_bouncer

    use numerical_constants, only : zero, half, one, two, c1e3, c1e6, pieni

    IMPLICIT NONE

    ! We have to declare all this stuff, and we can't set them PRIVATE.
    ! Therefore, we always need to import the SCATTER module using "only",
    ! or else it will bring the contents of parpro, comgetfields,
    ! and stringzerotrim along with it...
+ca parpro ! for nele

! For the string length stuff
+ca comgetfields
+ca stringzerotrim ! Note: Must include this again if linking to stringzerotrim to work.

    ! PUBLIC
    ! Common variables for the SCATTER routines
    logical scatter_active
    
    integer scatter_elemPointer (nele) ! Pointer from an element back to a ELEM statement
                                       ! (0 => not used)
    integer scatter_maxELEM
    parameter (scatter_maxELEM=200)    ! Max of scattering ELEM statements in use.
    integer scatter_maxGenELEM
    parameter (scatter_maxGenELEM=5)   ! Number of generators per ELEM
                                       ! (2 slots taken by pointers to singleElement and profile).
    
    ! Configuration for an ELEM, columns are:
    ! (1) = pointer to the SingleElement
    ! (2) = pointer to PROFILE
    ! (3)--(scatter_maxGenElem) = pointer to GENERATORs
    integer scatter_ELEM(scatter_maxELEM, scatter_maxGenELEM)
    
    real(kind=fPrec) scatter_ELEM_scale(scatter_maxELEM)
    
    ! Configuration for PROFILE
    integer scatter_maxPROFILE
    parameter (scatter_maxPROFILE=200)  ! Max number of profiles
    integer scatter_PROFILE(scatter_maxPROFILE, 5)
    ! Columns of scatter_PROFILE:
    ! (1)   : Profile name in fort.3 (points within scatter_cexpr)
    ! (2)   : Profile type
    ! (3-5) : Arguments (often pointing within scatter_{i|c|f}expr)
    
    ! Configuration for GENERATOR
    integer scatter_maxGENERATOR
    parameter (scatter_maxGENERATOR=20)
    integer scatter_GENERATOR(scatter_maxGENERATOR,5)
    ! (1)   : Generator name in fort.3 (points within scatter_cexpr)
    ! (2)   : Generator type
    ! (3-5) : Arguments (often pointing within scatter_{i|c|f}expr)
    
    ! General data storage ala DYNK
    integer scatter_maxdata, scatter_maxstrlen
    parameter (scatter_maxdata   = 5000,                              &
               scatter_maxstrlen = stringzerotrim_maxlen )
    
    integer,                       allocatable :: scatter_idata (:)
    real(kind=fPrec),              allocatable :: scatter_fdata (:)
    character (scatter_maxstrlen), allocatable :: scatter_cdata (:)
    
    ! Number of currently used positions in arrays
    integer scatter_nELEM, scatter_nPROFILE, scatter_nGENERATOR
    integer scatter_nidata, scatter_nfdata, scatter_ncdata
    
    integer scatter_seed1, scatter_seed2
    
    logical scatter_debug
    
    save scatter_elemPointer, scatter_ELEM, scatter_ELEM_scale,       &
         scatter_PROFILE, scatter_GENERATOR,                          &
         scatter_idata, scatter_fdata, scatter_cdata,                 &
         scatter_nELEM, scatter_nPROFILE, scatter_nGENERATOR,         &
         scatter_nidata, scatter_nfdata, scatter_ncdata,              &
         scatter_debug, scatter_active, scatter_seed1, scatter_seed2

+if cr
    integer :: scatter_filepos,scatter_filepos_cr
    integer,                      allocatable :: scatter_idata_cr (:)
    real(kind=fPrec),             allocatable :: scatter_fdata_cr (:)
    character(scatter_maxstrlen), allocatable :: scatter_cdata_cr (:)
    integer :: scatter_nidata_cr, scatter_nfdata_cr, scatter_ncdata_cr
    integer :: scatter_seed1_cr, scatter_seed2_cr
    
    save scatter_filepos,scatter_filepos_cr, &
         scatter_idata_cr, scatter_fdata_cr, scatter_cdata_cr, &
         scatter_nidata_cr,scatter_nfdata_cr, scatter_ncdata_cr, &
         scatter_seed1_cr, scatter_seed2_cr
+ei

! ================================================================================================ !
!  HERE COMES THE SUBROUTINES
! ================================================================================================ !
contains

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 02-11-2017
! =================================================================================================
subroutine scatter_allocate
    
      use crcoall
    implicit none

+ca parpro

    integer stat
    integer i,j
    
    write(lout,'(A,I8)') "SCATTER_ALLOCATE : scatter_maxdata=",scatter_maxdata
    allocate( scatter_idata(scatter_maxdata), &
              scatter_fdata(scatter_maxdata), &
              scatter_cdata(scatter_maxdata), &
              STAT=stat)

    if (stat.ne.0) then
        write(lout,'(A,I8)') "ERROR in SCATTER_ALLOCATE(); stat=",stat
        call prror(-1)
    end if
    
    ! Zero the memory for strings.
    do i=1, scatter_maxdata
        do j=1, scatter_maxstrlen
            scatter_cdata(i)(j:j) = char(0)
        end do
    end do
    
+if cr
    write(lout,'(A,I8)') "SCATTER_ALLOCATE [CR] : scatter_maxdata=",scatter_maxdata
    allocate( scatter_idata_cr(scatter_maxdata), &
              scatter_fdata_cr(scatter_maxdata), &
              scatter_cdata_cr(scatter_maxdata), &
              STAT=stat )
    
    if (stat.ne.0) then
       write(lout,'(A,I8)') "ERROR in SCATTER_ALLOCATE [CR]; stat=",stat
       call prror(-1)
    end if
+ei
end subroutine scatter_allocate

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
subroutine scatter_initialize
      use crcoall
    implicit none
    integer ierro
+ca parpro

    logical lopen

    ! Open scatter_log.txt
+if cr
    ! Could have loaded a CR just before the start of the tracking;
    ! in this case the scatter_log.txt is already open and positioned,
    ! so don't try to open the file again.
    if(scatter_filepos .eq. -1) then
        write(93,'(a)') "SCATTER> scatter_initialize opening new file scatter_log.txt"
+ei
        inquire( unit=667, opened=lopen )
        if (lopen) then
            write(lout,*) "ERROR in SCATTER when opening scatter_log.txt"
            write(lout,*) "Unit 667 was already taken."
            call prror(-1)
        end if
        
        open(667,file="scatter_log.txt",status="replace",form="formatted")
        write(667,"(A)") "# scatter_log"
        write(667,"(A)") "# ID turn bez scatter_GENERATOR t[MeV^2] xi theta[mrad] phi[rad] prob"

+if cr
        scatter_filepos = 2
        endfile(667,iostat=ierro)
        backspace(667,iostat=ierro)
    else
        write(93,'(a)') "SCATTER> scatter_initialize kept already opened file scatter_log.txt"
    end if !scatter_filepos .eq. -1
+ei
    
end subroutine scatter_initialize

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 02-11-2017
! =================================================================================================
subroutine scatter_closefiles
    
    implicit none
    logical lopen
    
    if (scatter_active) then
        inquire(unit=667, opened=lopen)
        if (lopen) close(667)
    end if
    
end subroutine scatter_closefiles

! =================================================================================================
!  K. Sjobak, BE-ABP-LAT and V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 11-2017
!  Called from COMNUL; initializes the arrays used by SCATTER.
! =================================================================================================
subroutine scatter_comnul
    implicit none
    
    integer i,j
    
    scatter_debug = .false.
    scatter_nidata = 0
    scatter_nfdata = 0
    scatter_ncdata = 0
    scatter_nELEM  = 0
    scatter_nPROFILE = 0
    scatter_nGENERATOR  = 0
    
    do i=1,nele
        scatter_elemPointer(i) = 0
    end do
    
    do i=1,scatter_maxELEM
        do j=1,scatter_maxGenELEM
            scatter_ELEM(i,j) = 0
        end do
        scatter_ELEM_scale(i) = zero
    end do
    
    do i=1,scatter_maxPROFILE
        scatter_PROFILE(i,1)=0
        scatter_PROFILE(i,2)=0
        scatter_PROFILE(i,3)=0
        scatter_PROFILE(i,4)=0
        scatter_PROFILE(i,5)=0
    end do
    
    do i=1,scatter_maxGENERATOR
        scatter_GENERATOR(i,1)=0
        scatter_GENERATOR(i,2)=0
        scatter_GENERATOR(i,3)=0
        scatter_GENERATOR(i,4)=0
        scatter_GENERATOR(i,5)=0
    end do

    scatter_seed1 = -1
    scatter_seed2 = -1

+if cr
    scatter_filepos = -1
+ei
end subroutine scatter_comnul

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
!  Called from CRCHECK; reads the _cr arrays for scatter from file-
!  Sets readerr=.true. if something goes wrong while reading.
! =================================================================================================
+if cr
subroutine scatter_crcheck_readdata(fileunit,readerr)
    
      use crcoall
    implicit none
    integer, intent(in)  :: fileunit
    logical, intent(out) :: readerr

    
    integer j
    
    read(fileunit,err=1,end=1) &
         scatter_filepos_cr, &
         scatter_seed1_cr, scatter_seed2_cr, &
         scatter_nidata_cr, scatter_nfdata_cr, scatter_ncdata_cr, &
         (scatter_idata_cr(j), j=1,scatter_maxdata), &
         (scatter_fdata_cr(j), j=1,scatter_maxdata), &
         (scatter_cdata_cr(j), j=1,scatter_maxdata)
    
    readerr=.false.
    return
    
1   continue
    write(lout,*) "READERR in scatter_crcheck; fileunit=",fileunit
    write(93,*)   "READERR in scatter_crcheck; fileunit=",fileunit
    readerr=.true.
    
end subroutine scatter_crcheck_readdata

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
!  Called from CRCHECK; resets the position of scatter_log.txt
! =================================================================================================
subroutine scatter_crcheck_positionFiles
    
      use crcoall
    implicit none


    logical lopen
    integer ierro
+if boinc
    character(len=256) filename
+ei
    integer j
    character(len=1024) arecord
    
    inquire( unit=667, opened=lopen )
    if(lopen) then
        write(93,'(a)') "SIXTRACR CRCHECK FAILED while repsositioning scatter_log.txt"
        write(93,'(a)') "UNIT 667 already in use!"

        endfile (93,iostat=ierro)
        backspace (93,iostat=ierro)

        write(lout,*) "SIXTRACR CRCHECK failure positioning scatter_log.txt"
        call prror(-1)
    end if

    if(scatter_filepos_cr .ne. -1) then
+if boinc
        call boincrf("scatter_log.txt",filename)
        open(unit=667,file=filename,status="old",action="readwrite", err=1)
+ei
+if .not.boinc
        open(unit=667,file="scatter_log.txt",status="old",action="readwrite", err=1)
+ei
        scatter_filepos=0
        do j=1, scatter_filepos_cr
            read(667,'(a1024)',end=1,err=1,iostat=ierro) arecord
            scatter_filepos = scatter_filepos+1
        end do

        ! Truncate the file after scatter_filepos_cr lines
        endfile(667,iostat=ierro)
        close(667)

+if boinc
        call boincrf("scatter_log.txt",filename)
        open(unit=667,file=filename,status="old",position="append",action="write", err=1)
+ei
+if .not.boinc
        open(unit=667,file="scatter_log.txt",status="old",position='append',action="write", err=1)
+ei       
        write(97,*) "SIXTRACR CRCHECK sucessfully repositioned scatter_log.txt, "// &
                    "scatter_filepos=",scatter_filepos, "scatter_filepos_cr=",scatter_filepos_cr
        endfile (93,iostat=ierro)
        backspace (93,iostat=ierro)

    else
        write(93,*) "SIXTRACR CRCHECK did not attempt repositioning "// &
                    "of scatter_log.txt, scatter_filepos_cr=",scatter_filepos_cr
        write(93,*) "If anything has been written to the file, "// &
                    "it will be correctly truncated in scatter_initialize."
        endfile (93,iostat=ierro)
        backspace (93,iostat=ierro)
    end if
    
    return ! All was well
    
1   continue
    write(93,*) 'SIXTRACR CRCHECK *** ERROR *** reading scatter_log.txt, iostat=',ierro
    write(93,*) 'scatter_filepos=',scatter_filepos,' scatter_filepos_cr=',scatter_filepos_cr
    endfile   (93,iostat=ierro)
    backspace (93,iostat=ierro)
    write(lout,*)'SIXTRACR CRCHECK failure positioning scatter_log.txt'
    
    call prror(-1)
    
end subroutine scatter_crcheck_positionFiles

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
!  Called from CRPOINT; write checkpoint data to fort.95/96
! =================================================================================================
subroutine scatter_crpoint(fileunit,writeerr,ierro)
    
      use crcoall
    implicit none
    integer, intent(in)    :: fileunit
    logical, intent(out)   :: writeerr
    integer, intent(inout) :: ierro    !Operate dummy in "passthrough" mode if no error -> inout

    integer j
    
    write(fileunit,err=1,iostat=ierro) &
          scatter_filepos, &
          scatter_seed1, scatter_seed2, &
          scatter_nidata, scatter_nfdata, scatter_ncdata, &
         (scatter_idata(j), j=1,scatter_maxdata), &
         (scatter_fdata(j), j=1,scatter_maxdata), &
         (scatter_cdata(j), j=1,scatter_maxdata)
    endfile   (fileunit,iostat=ierro)
    backspace (fileunit,iostat=ierro)
    
    return
    
1   continue
    writeerr=.true.
    
end subroutine scatter_crpoint

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
!  Called from CRSTART; copies the _cr arrays into the normal arrays used during tracking in order
!  to recreate the state of the SCATTER block at the time of the checkpoint.
! =================================================================================================
subroutine scatter_crstart
    
    implicit none
    
    integer j
    
    scatter_nidata = scatter_nidata_cr
    scatter_nfdata = scatter_nfdata_cr
    scatter_ncdata = scatter_ncdata_cr
    
    do j=1, scatter_maxdata
        scatter_idata(j) = scatter_idata_cr(j)
        scatter_fdata(j) = scatter_fdata_cr(j)
        scatter_cdata(j) = scatter_cdata_cr(j)
    end do
    
end subroutine scatter_crstart
+ei

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
subroutine scatter_dumpdata

      use crcoall
    implicit none

+ca stringzerotrim

    integer ii,jj

    write(lout,'(a)') "*** BEGIN SCATTER DUMP ***"

    write(lout,'(a)') "Options:"
    write(lout,*)     "scatter_active =", scatter_active
    write(lout,*)     "scatter_debug  =", scatter_debug
    write(lout,*)     "Seeds          =", scatter_seed1, ";", scatter_seed2

    write(lout,'(a)') "Arrays:"

    write(lout,*) "scatter_ELEM: (",scatter_nELEM,",",scatter_maxGenELEM,"):"
    do ii=1, scatter_nELEM
        write(lout,*) ii, ":", scatter_ELEM(ii,:)
    end do

    write(lout,*) "scatter_ELEM_scale: (",scatter_nELEM,"):"
    do ii=1, scatter_nELEM
        write(lout,*) ii, ":", scatter_ELEM_scale(ii)
    end do

    write(lout,*) "scatter_PROFILE: (", scatter_nPROFILE,",",5,"):"
    do ii=1, scatter_nPROFILE
        write(lout,*) ii, ":", scatter_PROFILE(ii,:)
    end do

    write(lout,*) "scatter_GENERATOR: (",scatter_nGENERATOR,",",5,"):"
    do ii=1, scatter_nGENERATOR
        write(lout,*) ii, ":", scatter_GENERATOR(ii,:)
    end do

    write(lout,*) "scatter_idata: (",scatter_nidata,"):"
    do ii=1, scatter_nidata
        write(lout,*) ii, ":", scatter_idata(ii)
    end do

    write(lout,*) "scatter_fdata: (",scatter_nfdata,"):"
    do ii=1, scatter_nfdata
        write(lout,*) ii, ":", scatter_fdata(ii)
    end do

    write(lout,*) "scatter_cdata: (",scatter_ncdata,"):"
    do ii=1, scatter_ncdata
        write(lout,*) ii, ": '"//trim(stringzerotrim(scatter_cdata(ii)))//"'"
    end do

    write(lout,'(a)') "**** END SCATTER DUMP ****"

end subroutine scatter_dumpdata

! =================================================================================================
! BEGIN Input Parser Functions
! =================================================================================================

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
subroutine scatter_parseElem(getfields_fields,getfields_lfields,getfields_nfields)

      use crcoall
    implicit none

+ca comgetfields
+ca stringzerotrim

+ca common
+ca commonmn

    ! Temporary Variables
    integer ii, j
+if crlibm
    integer errno
    real(kind=fPrec) round_near
+ei

    ! Check number of arguments
    if(getfields_nfields .lt. 5) then
        write(lout,'(a)') "SCATTER> ERROR, ELEM expected at least 5 arguments:"
        write(lout,'(a)') "ELEM elemname profile scaling gen1 (gen2...)"
        call prror(-1)
    end if

    ! Add the element to the list
    scatter_nELEM = scatter_nELEM + 1
    if (scatter_nELEM .gt. scatter_maxELEM ) then
        write(lout,'(a,i4,a)') "SCATTER> ERROR, max elements = ",scatter_maxELEM," exceeded."
        call prror(-1)
    end if

    ! Find the single element referenced
    ii = -1
    do j=1,il
        if(bez(j) .eq. getfields_fields(2)(1:getfields_lfields(2))) then
            if (ii.ne.-1) then
                write(lout,'(a)') "SCATTER> ERROR, found element '"// &
                                  getfields_fields(2)(1:getfields_lfields(2))// &
                                  "' twice in SINGLE ELEMENTS list."
                call prror(-1)
            end if
            ii = j

            if (scatter_elemPointer(j).ne.0) then
                write(lout,'(a)') "SCATTER> ERROR, tried to define element '"// &
                                  getfields_fields(2)(1:getfields_lfields(2))// &
                                  "' twice."
                call prror(-1)
            end if

            if (kz(j) .ne. 40) then
                write(lout,'(a,1x,i4)') "SCATTER> ERROR, SCATTER can only work on SINGLE ELEMENTs"//&
                     "of type 40; the referenced element '"//&
                     getfields_fields(2)(1:getfields_lfields(2))//&
                     "'is of type", kz(j)
                call prror(-1)
            end if
            
            if(el(j).ne.0 .or. ek(j).ne.0 .or. ed(j).ne.0) then
                write(lout,*) &
                     'SCATTER> ERROR: length el(j) (SCATTER is treated as thin element), '// &
                     ' and first and second field have to be zero: el(j)=ed(j)=ek(j)=0;'//&
                'but el(',j,')=',el(j),', ed(',j,')=',ed(j),', ek(',j,')=',ek(j),"."
                write(lout,*) &
                     'Please check your input in the single element '//&
                'definition of your SCATTER. All values except for the type must be zero.'
                call prror(-1)
            end if
            
            scatter_elemPointer(j) = scatter_nELEM
            scatter_ELEM(scatter_nELEM,1) = j
        end if
    end do

    if (scatter_ELEM(scatter_nELEM,1).eq.0) then
        write(lout,*) "SCATTER> ERROR: Could not find element '"// &
                      getfields_fields(2)(1:getfields_lfields(2)) // "'"
        call prror(-1)
    end if

    ! Find the profile name referenced
    do j=1,scatter_nPROFILE
        if( trim(stringzerotrim(scatter_cdata(scatter_PROFILE(j,1)))) &
                .eq. getfields_fields(3)(1:getfields_lfields(3)) ) then
            scatter_ELEM(scatter_nELEM,2) = j
        end if
    end do

    if (scatter_ELEM(scatter_nELEM,2).eq.0) then
        write(lout,*) "SCATTER> ERROR: Could not find profile '"// &
                      getfields_fields(3)(1:getfields_lfields(3)) // "'"
        call prror(-1)
    end if

    ! Store the scaling
+if crlibm
    scatter_ELEM_scale(scatter_nELEM) = round_near(errno,getfields_lfields(4)+1,getfields_fields(4))
    if(errno .ne. 0) call rounderr(errno,getfields_fields,4,scatter_ELEM_scale(scatter_nELEM))
+ei
+if .not.crlibm
    read(getfields_fields(4)(1:getfields_lfields(4)),*) scatter_ELEM_scale(scatter_nELEM)
+ei

    ! Find the generator(s) referenced
    if (getfields_nfields-4 .gt. scatter_maxGenELEM-2) then
        write(lout,*) "SCATTER> ERROR when parsing ELEM,", &
                      getfields_nfields-4, "generators specified, space for", &
                      scatter_maxGenELEM-2
        call prror(-1)
    end if

    do ii=5,getfields_nfields
        ! In general inside this loop:
        ! Take care of offsets in getfields_field (-4) and scatter_ELEM (+2)
        ! such that ii=5 -> column 3 of scatter_ELEM, ii=6 -> column 4, etc.
        !
        ! A dummy variable might not be a bad idea here ...

        !In case we won't find the generator name
        scatter_ELEM(scatter_nELEM,ii-4+2) = -1

        ! Search for the generator with the right name
        do j=1, scatter_nGENERATOR
            if( trim(stringzerotrim(scatter_cdata(scatter_GENERATOR(j,1)))) &
                .eq. getfields_fields(ii)(1:getfields_lfields(ii)) ) then
                ! Found it
                scatter_ELEM(scatter_nELEM,ii-4+2) = j
            end if
        end do

        ! If it is still -1, it wasn't found
        if(scatter_ELEM(scatter_nELEM,ii-4+2) .eq. -1) then
            write(lout,*) "SCATTER> ERROR when parsing ELEM, generator '"// &
                          getfields_fields(ii)(1:getfields_lfields(ii))// &
                          "' not found."
            call prror(-1)
        end if

        ! Loop over those GENerators we've filled before
        ! (i.e. up to but not including column ii-4+2)
        ! to check for duplicates
        do j=3, ii-4+2-1
            if(scatter_ELEM(scatter_nELEM,j) .eq. scatter_ELEM(scatter_nELEM,ii-4+2)) then
                write(lout,*) "SCATTER> ERROR when parsing ELEM, generator '"// &
                              getfields_fields(ii)(1:getfields_lfields(ii)) // &
                              "' used twice."
                call prror(-1)
            end if
        end do
    end do

end subroutine scatter_parseElem

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 20-10-2017
! =================================================================================================
subroutine scatter_parseProfile(getfields_fields,getfields_lfields,getfields_nfields)

      use crcoall
    implicit none

+ca comgetfields
+ca stringzerotrim

    ! Temporary Variables
    integer ii, tmpIdx
+if crlibm
    integer errno
    real(kind=fPrec) round_near
+ei

    ! Check number of arguments
    if(getfields_nfields .lt. 3) then
        write(lout,'(a)') "SCATTER> ERROR, PRO expected at least 3 arguments:"
        write(lout,'(a)') "PRO name type (arguments...)"
        call prror(-1)
    end if

    ! Add a profile to the list
    scatter_nPROFILE = scatter_nPROFILE + 1
    if (scatter_nPROFILE .gt. scatter_maxPROFILE ) then
        write(lout,'(a,i4,a)') "SCATTER> ERROR, max profiles = ",scatter_maxPROFILE," exceeded."
        call prror(-1)
    end if

    ! Store the profile name
    scatter_ncdata = scatter_ncdata + 1
    if (scatter_ncdata .gt. scatter_maxdata ) then
        write(lout,'(a,i4,a)') "SCATTER> ERROR, scatter_maxdata = ",scatter_maxdata," exceeded for scatter_ncdata"
        call prror(-1)
    end if
    scatter_cdata(scatter_ncdata)(1:getfields_lfields(2)) = getfields_fields(2)(1:getfields_lfields(2))
    scatter_PROFILE(scatter_nPROFILE,1)                   = scatter_ncdata

    ! Check that the profile name is unique
    do ii=1,scatter_nPROFILE-1
        if(trim(stringzerotrim(scatter_cdata(scatter_PROFILE(ii,1)) )) &
            .eq. getfields_fields(2)(1:getfields_lfields(2)) ) then
            
            write(lout,'(a)') "SCATTER> ERROR, profile name '"// &
                              getfields_fields(2)(1:getfields_lfields(2))// &
                              "' is not unique."
            call prror(-1)
        end if
    end do

    ! Profile type dependent code
    select case (getfields_fields(3)(1:getfields_lfields(3)))
    case("FLAT")
        scatter_PROFILE(scatter_nPROFILE,2) = 1 ! Integer code for FLAT
        if(getfields_nfields .ne. 6) then
            write(lout,'(a)') "SCATTER> ERROR, PROfile type FLAT expected 6 arguments:"
            write(lout,'(a)') "PRO name FLAT density[targets/cm^2] mass[MeV/c^2] momentum[MeV/c]"
            call prror(-1)
        end if

        ! Request space to store the density
        tmpIdx = scatter_nfdata + 1
        scatter_PROFILE(scatter_nPROFILE,3) = tmpIdx
        scatter_nfdata = scatter_nfdata + 3
        if(scatter_nfdata .gt. scatter_maxdata) then
            write(lout,'(a,i4,a)') "SCATTER> ERROR, maxdata = ",scatter_maxdata," exceeded for floats."
            call prror(-1)
        end if

+if crlibm
        ! Density
        scatter_fdata(tmpIdx) = round_near(errno,getfields_lfields(4)+1,getfields_fields(4))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,4,scatter_fdata(tmpIdx))

        ! Mass
        scatter_fdata(tmpIdx+1) = round_near(errno,getfields_lfields(5)+1,getfields_fields(5))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,5,scatter_fdata(tmpIdx+1))

        ! Momentum
        scatter_fdata(tmpIdx+2) = round_near(errno,getfields_lfields(6)+1,getfields_fields(6))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,6,scatter_fdata(tmpIdx+2))
+ei
+if .not.crlibm
        ! Density
        read(getfields_fields(4)(1:getfields_lfields(4)),*) scatter_fdata(tmpIdx)

        ! Mass
        read(getfields_fields(5)(1:getfields_lfields(5)),*) scatter_fdata(tmpIdx+1)

        ! Momentum
        read(getfields_fields(6)(1:getfields_lfields(6)),*) scatter_fdata(tmpIdx+2)
+ei

    case("GAUSS1")
        scatter_PROFILE(scatter_nPROFILE,2) = 10  ! Integer code for BEAM_GAUSS1
        if(getfields_nfields .ne. 8) then
            write(lout,'(a)') "SCATTER> ERROR, PROfile type GAUSS1 expected 8 arguments:"
            write(lout,'(a)') "PRO name GAUSS1 beamtot[particles] sigma_x[mm] sigma_y[mm] "// &
                              "offset_x[mm] offset_y[mm]"
            call prror(-1)
        end if

        ! Request space to store the density
        tmpIdx = scatter_nfdata + 1
        scatter_PROFILE(scatter_nPROFILE,3) = tmpIdx
        scatter_nfdata = scatter_nfdata + 5
        if(scatter_nfdata .gt. scatter_maxdata) then
            write(lout,'(a,i4,a)') "SCATTER> ERROR, maxdata = ",scatter_maxdata," exceeded for floats."
            call prror(-1)
        end if

+if crlibm
        ! Beam Charge
        scatter_fdata(tmpIdx) = round_near(errno,getfields_lfields(4)+1,getfields_fields(4))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,4,scatter_fdata(tmpIdx))

        ! Sigma X
        scatter_fdata(tmpIdx+1) = round_near(errno,getfields_lfields(5)+1,getfields_fields(5))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,5,scatter_fdata(tmpIdx+1))

        ! Sigma Y
        scatter_fdata(tmpIdx+2) = round_near(errno,getfields_lfields(6)+1,getfields_fields(6))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,6,scatter_fdata(tmpIdx+2))
        
        ! Offset X
        scatter_fdata(tmpIdx+3) = round_near(errno,getfields_lfields(7)+1,getfields_fields(7))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,7,scatter_fdata(tmpIdx+3))

        ! Offset Y
        scatter_fdata(tmpIdx+4) = round_near(errno,getfields_lfields(8)+1,getfields_fields(8))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,8,scatter_fdata(tmpIdx+4))
+ei
+if .not.crlibm
        ! Beam Charge
        read(getfields_fields(4)(1:getfields_lfields(4)),*) scatter_fdata(tmpIdx)

        ! Sigma X
        read(getfields_fields(5)(1:getfields_lfields(5)),*) scatter_fdata(tmpIdx+1)

        ! Sigma Y
        read(getfields_fields(6)(1:getfields_lfields(6)),*) scatter_fdata(tmpIdx+2)

        ! Offset X
        read(getfields_fields(7)(1:getfields_lfields(7)),*) scatter_fdata(tmpIdx+3)

        ! Offset Y
        read(getfields_fields(8)(1:getfields_lfields(8)),*) scatter_fdata(tmpIdx+4)
+ei

    case default
        write(lout,'(a)') "SCATTER> ERROR, PRO name '"// &
                          getfields_fields(3)(1:getfields_lfields(3))// &
                          "' not recognized."
        call prror(-1)

    end select

end subroutine scatter_parseProfile

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
subroutine scatter_parseGenerator(getfields_fields,getfields_lfields,getfields_nfields)

      use crcoall
    implicit none

+ca comgetfields
+ca stringzerotrim

    ! Temporary Variables
    integer ii, tmpIdx
+if crlibm
    integer errno
    real(kind=fPrec) round_near
+ei

    ! Check number of arguments
    if(getfields_nfields .lt. 3) then
        write(lout,'(a)') "SCATTER> ERROR, GEN expected at least 3 arguments:"
        write(lout,'(a)') "GEN name type (arguments...)"
        call prror(-1)
    end if

    ! Add a generator to the list
    scatter_nGENERATOR = scatter_nGENERATOR + 1
    if(scatter_nGENERATOR .gt. scatter_maxGENERATOR) then
        write(lout,'(a,i4,a)') "SCATTER> ERROR, max generators = ",scatter_maxGENERATOR," exceeded."
        call prror(-1)
    end if

    ! Store the generator name
    scatter_ncdata = scatter_ncdata + 1
    if(scatter_ncdata .gt. scatter_maxdata) then
        write(lout,'(a,i4,a)') "SCATTER> ERROR, scatter_maxdata = ",scatter_maxdata," exceeded for scatter_ncdata"
        call prror(-1)
    end if
    scatter_cdata(scatter_ncdata)(1:getfields_lfields(2)) = getfields_fields(2)(1:getfields_lfields(2))
    scatter_GENERATOR(scatter_nGENERATOR,1) = scatter_ncdata

    ! Check that the generator name is unique
    do ii=1,scatter_nGENERATOR-1
        if (trim(stringzerotrim(scatter_cdata(scatter_GENERATOR(ii,1)) )) &
            .eq. getfields_fields(2)(1:getfields_lfields(2)) ) then
            write(lout,'(a)') "SCATTER> ERROR, generator name '"// &
                              getfields_fields(2)(1:getfields_lfields(2))// &
                              "' is not unique."
            call prror(-1)
        end if
    end do

    ! Generator type-dependent code
    select case (getfields_fields(3)(1:getfields_lfields(3)))
    case("ABSORBER")

        scatter_GENERATOR(scatter_nGENERATOR,2) = 1  ! Code for ABSORBER

    case("PPBEAMELASTIC")

        scatter_GENERATOR(scatter_nGENERATOR,2) = 10 ! Code for PPBEAMELASTIC
        if(getfields_nfields .lt. 8 .or. getfields_nfields .gt. 9) then
            write(lout,'(a)') "SCATTER> ERROR, GEN PPBEAMELASTIC expected 8 or 9 arguments:"
            write(lout,'(a)') "GEN name PPBEAMELASTIC a b1 b2 phi tmin (crossSection)"
            call prror(-1)
        end if

        ! Request space to store the arguments
        tmpIdx = scatter_nfdata + 1
        scatter_GENERATOR(scatter_nGENERATOR,3) = tmpIdx
        scatter_GENERATOR(scatter_nGENERATOR,4) = 0      ! Index of scatter input, if present
        scatter_nfdata = scatter_nfdata + getfields_nfields - 3
        if(scatter_nfdata .gt. scatter_maxdata) then
            write(lout,'(a,i4,a)') "SCATTER> ERROR, maxdata = ",scatter_maxdata," exceeded for floats."
            call prror(-1)
        end if

+if crlibm
        ! PPBEAMELASTIC a
        scatter_fdata(tmpIdx)   = round_near(errno,getfields_lfields(4)+1,getfields_fields(4))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,4,scatter_fdata(tmpIdx))

        ! PPBEAMELASTIC b1
        scatter_fdata(tmpIdx+1) = round_near(errno,getfields_lfields(5)+1,getfields_fields(5))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,5,scatter_fdata(tmpIdx+1))

        ! PPBEAMELASTIC b2
        scatter_fdata(tmpIdx+2) = round_near(errno,getfields_lfields(6)+1,getfields_fields(6))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,6,scatter_fdata(tmpIdx+2))

        ! PPBEAMELASTIC phi
        scatter_fdata(tmpIdx+3) = round_near(errno,getfields_lfields(7)+1,getfields_fields(7))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,7,scatter_fdata(tmpIdx+3))

        ! PPBEAMELASTIC b2
        scatter_fdata(tmpIdx+4) = round_near(errno,getfields_lfields(8)+1,getfields_fields(8))
        if(errno .ne. 0) call rounderr(errno,getfields_fields,8,scatter_fdata(tmpIdx+4))

        if(getfields_nfields .eq. 9) then
            ! PPBEAMELASTIC crossSection
            scatter_fdata(tmpIdx+5) = round_near(errno,getfields_lfields(9)+1,getfields_fields(9))
            if(errno .ne. 0) call rounderr(errno,getfields_fields,9,scatter_fdata(tmpIdx+5))
            scatter_GENERATOR(scatter_nGENERATOR,4) = tmpIdx+5
        end if
+ei
+if .not.crlibm
        ! PPBEAMELASTIC a
        read(getfields_fields(4)(1:getfields_lfields(4)),*) scatter_fdata(tmpIdx)

        ! PPBEAMELASTIC b1
        read(getfields_fields(5)(1:getfields_lfields(5)),*) scatter_fdata(tmpIdx+1)

        ! PPBEAMELASTIC b2
        read(getfields_fields(6)(1:getfields_lfields(6)),*) scatter_fdata(tmpIdx+2)

        ! PPBEAMELASTIC phi
        read(getfields_fields(7)(1:getfields_lfields(7)),*) scatter_fdata(tmpIdx+3)

        ! PPBEAMELASTIC tmin
        read(getfields_fields(8)(1:getfields_lfields(8)),*) scatter_fdata(tmpIdx+4)

        if(getfields_nfields .eq. 9) then
            ! PPBEAMELASTIC crossSection
            read(getfields_fields(9)(1:getfields_lfields(9)),*) scatter_fdata(tmpIdx+5)
            scatter_GENERATOR(scatter_nGENERATOR,4) = tmpIdx+5
        end if
+ei

        ! Check sanity of input values
        if(scatter_fdata(tmpIdx+1) .lt. pieni) then
            write(lout,'(a)') "SCATTER> ERROR, GEN PPBEAMELASTIC 5th input (b1) must be larger than zero"
            call prror(-1)
        end if
        if(scatter_fdata(tmpIdx+2) .lt. pieni) then
            write(lout,'(a)') "SCATTER> ERROR, GEN PPBEAMELASTIC 6th input (b2) must be larger than zero"
            call prror(-1)
        end if

    case default

        write(lout,'(a)') "SCATTER> ERROR, GEN name '"// &
                          getfields_fields(3)(1:getfields_lfields(3))// &
                          "' not recognized."
        call prror(-1)

    end select

end subroutine scatter_parseGenerator

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
subroutine scatter_parseSeed(getfields_fields,getfields_lfields,getfields_nfields)

      use crcoall
    implicit none

+ca comgetfields

    ! Check the number of arguments
    if(getfields_nfields .ne. 3) then
        write(lout,'(a)') "SCATTER> ERROR, SEED expected 2 arguments:"
        write(lout,'(a)') "GEN seed1 seed2"
        call prror(-1)
    end if

    ! Read the seeds
    read(getfields_fields(2)(1:getfields_lfields(2)),*) scatter_seed1
    read(getfields_fields(3)(1:getfields_lfields(3)),*) scatter_seed2

end subroutine scatter_parseSeed
! =================================================================================================
! END Input Parser Functions
! =================================================================================================

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 02-11-2017
! =================================================================================================
subroutine scatter_thin(ix, turn)
    
      use crcoall
    implicit none
    

+ca stringzerotrim
+ca common
+ca commonmn

    ! Temp variables
    integer          ELEMidx, PROidx, GENidx
    integer          i, j
    integer          tmpSeed1, tmpSeed2
    real(kind=fPrec) s, t, xi, theta
    real(kind=fPrec) crossSection, N, P
    real(kind=fPrec) rndPhi(npart), rndP(npart)
    real(kind=fPrec) scaling

    integer, intent(in) :: ix, turn

    ELEMidx = scatter_elemPointer(ix)
    PROidx  = scatter_ELEM(ELEMidx,2)
    scaling = scatter_ELEM_scale(ELEMidx)

    if (scatter_debug) then
        write(lout,*) "SCATTER> In scatter_thin, ix=",ix, &
                      "bez='"//trim(bez(ix))//"' napx=",napx, "turn=",turn, &
                      "scaling=",scaling
    end if

    if (scaling.le.pieni) then
        ! Skip the whole thing if the scaling is zero
        return
    end if
    
    ! Store the seeds in the randum number generator, and set ours
    call recuut(tmpSeed1,tmpSeed2)
    call recuin(scatter_seed1,scatter_seed2)
    
    ! Loop over generators
    do i=3,scatter_maxGenELEM
        
        GENidx = scatter_ELEM(ELEMidx,i)
        if(GENidx .eq. 0) exit ! No generator
        
        ! Generate a random phi
        call ranecu(rndPhi, napx, -1)
        call ranecu(rndP,   napx, -1)
        rndPhi = rndPhi*(two*pi)

        do j=1, napx
            ! Compute the cross section at this s
            ! (in most cases roughly equal for all particles; use mean x,y,xp,yp,E)
            crossSection = scatter_generator_getCrossSection( &
                PROidx,GENidx, xv(1,j),xv(2,j),yv(1,j),yv(2,j),ejv(j) &
            )

            ! Ask profile for density at x,y
            N = scatter_profile_getDensity(PROidx,xv(1,j),xv(2,j))

            ! Compute probability P
            P = (N*crossSection)*scaling
            
            ! If RNG > P -> go to next particle, else scatter
            if (rndP(j) .gt. P) then
                cycle
            end if

            ! Ask generator for t and xi
            call scatter_generator_getTandXi(GENidx,t,xi)

            ! Use generator t and xi to update particle j;
            ! remember to update ALL the energy arrays
            theta   = c1e3*sqrt(t)/ejfv(j)                  ! Scale to mrad
            yv(1,j) = theta*cos_mb(rndPhi(j)) + yv(1,j)
            yv(2,j) = theta*sin_mb(rndPhi(j)) + yv(2,j)
            
            ! Output to file
            write(667,"(2(1x,I8),2(1x,A),2(1x,F13.3),3(1x,1PE16.9))") j, turn, bez(ix), &
                trim(stringzerotrim(scatter_cdata(scatter_GENERATOR(GENidx,1)))), &
                t, xi, theta, rndPhi(j), P
+if cr
            scatter_filepos = scatter_filepos+1
+ei
        end do
    end do

+if cr
    endfile(667,iostat=ierro)
    backspace(667,iostat=ierro)
+ei
    
    ! Restore seeds in random generator
    call recuut(scatter_seed1,scatter_seed2)
    call recuin(tmpSeed1,tmpSeed2)
    
end subroutine scatter_thin

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 02-11-2017
! =================================================================================================
real(kind=fPrec) function scatter_profile_getDensity(profileIdx, x, y) result(retval)

      use crcoall
    implicit none

+ca common
+ca stringzerotrim
    
    integer, intent(in) :: profileIdx
    real(kind=fPrec), intent(in) :: x, y
    
    real(kind=fPrec) beamtot, sigmaX, sigmaY, offsetX, offsetY
    integer tmpIdx
    
    tmpIdx = scatter_PROFILE(profileIdx,3)
    
    select case (scatter_PROFILE(profileIdx,2))
    case (1)  ! FLAT
        retval  = scatter_fdata(tmpIdx)
    case (10) ! GAUSS1
        beamtot = scatter_fdata(tmpIdx)
        sigmaX  = scatter_fdata(tmpIdx + 1)
        sigmaY  = scatter_fdata(tmpIdx + 2)
        offsetX = scatter_fdata(tmpIdx + 3)
        offsetY = scatter_fdata(tmpIdx + 4)
        retval  = beamtot/(two*(pi*(sigmaX*sigmaY)))    &
                * exp_mb(-half*((x-offsetX)/sigmaX)**2) &
                * exp_mb(-half*((y-offsetY)/sigmaY)**2)
    case default
        write(lout,*) "SCATTER> ERROR in scatter_profile_getDensity"
        write(lout,*) "Type", scatter_PROFILE(profileIdx,2), &
                      "for profile '"// trim(stringzerotrim( &
                      scatter_cdata(scatter_PROFILE(profileIdx,1)) &
                      ))//"' not understood."
        call prror(-1)
    end select
    
end function scatter_profile_getDensity

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
subroutine scatter_profile_getParticle(profileIdx, x, y, xp, yp, E)
    
    implicit none

 
    integer, intent(in) :: profileIdx
    real(kind=fPrec), intent(in)  :: x, y
    real(kind=fPrec), intent(out) :: xp, yp, E

    ! Return a particle to collide with
    ! Add dummy variables for now, which stops ifort from complaining
    xp = zero
    yp = zero
    E  = zero
    
end subroutine scatter_profile_getParticle

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 09-2017
! =================================================================================================
real(kind=fPrec) function scatter_generator_getCrossSection(profileIDX, generatorIDX, x,y, xp,yp, E)

      use crcoall
    implicit none

+ca stringzerotrim

    integer, intent(in) :: profileIDX, generatorIDX
    real(kind=fPrec), intent(in) :: x, y, xp, yp, E

    ! Temporary variables
    integer          tmpIdx
    real(kind=fPrec) xp_target, yp_target, E_target

    ! Calculate S
    call scatter_profile_getParticle(profileIDX, x,y, xp_target,yp_target,E_target)

    ! Calculate the cross section as function of S
    select case (scatter_GENERATOR(generatorIDX,2))
    case (1)  ! ABSORBER
        !...

    case (10) ! PPBEAMELASTIC
        tmpIdx = scatter_GENERATOR(generatorIDX,4)
        if(tmpIdx .eq. 0) then
            scatter_generator_getCrossSection = 30d-27
        else
            scatter_generator_getCrossSection = scatter_fdata(tmpIdx)
        end if

    case default
        write(lout,*) "SCATTER> ERROR in scatter_generator_getCrossSection"
        write(lout,*) "Type", scatter_PROFILE(profileIdx,2), &
                      "for profile '"// trim(stringzerotrim( &
                      scatter_cdata(scatter_PROFILE(profileIdx,1)) &
                      ))//"' not understood."
        call prror(-1)

    end select

end function scatter_generator_getCrossSection

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 02-11-2017
! =================================================================================================
subroutine scatter_generator_getTandXi(generatorIDX, t, xi)

      use crcoall
    implicit none


    integer, intent(in) :: generatorIDX
    real(kind=fPrec), intent(out) :: t, xi

    ! Temporary variables
    integer          tmpIdx
    real(kind=fPrec) a, b1, b2, phi, tmin

    ! Could be affected by S as well?

    select case (scatter_GENERATOR(generatorIDX,2))
    case (1)  ! ABSORBER
        !...
    case (10) ! PPBEAMELASTIC

        tmpIdx = scatter_GENERATOR(generatorIDX,3)
        a      = scatter_fdata(tmpIdx)
        b1     = scatter_fdata(tmpIdx+1)
        b2     = scatter_fdata(tmpIdx+2)
        phi    = scatter_fdata(tmpIdx+3)
        tmin   = scatter_fdata(tmpIdx+4)
        
        t  = scatter_generator_getPPElastic(a, b1, b2, phi, tmin)
        xi = zero   ! Dummy value, for now
        t  = t*c1e6 ! Scale return variable to MeV^2

    case default
        write(lout,*) "SCATTER> ERROR in scatter_generator_getTandXi"
        write(lout,*) "Type", generatorIDX, "not understood"
        call prror(-1)

    end select

end subroutine scatter_generator_getTandXi

! =================================================================================================
!  K. Sjobak, V.K. Berglyd Olsen, BE-ABP-HSS
!  Last modified: 02-11-2017
!  Based on Helmut Burkhardt's code presented on 05-04-2017
!  "Elastic pp scattering estimates and simulation relevant for burn-off"
!  https://indico.cern.ch/event/625576/
! =================================================================================================
real(kind=fPrec) function scatter_generator_getPPElastic(a, b1, b2, phi, tmin) result(t)

      use crcoall
    implicit none


    real(kind=fPrec), intent(in) :: a, b1, b2, phi, tmin

    ! Temp Variables
    integer          nItt, maxItt
    real(kind=fPrec) g1, g2, g3, gg, prob3, invB1, invB2, rndArr(3)

    ! Approximate distribution
    g1    =           exp_mb(-b1*tmin)/b1  ! Soft scatter term
    g3    = (a**2) * (exp_mb(-b2*tmin)/b2) ! Hard scatter term
    prob3 = g3/(g1+g3)              ! Probability of g3
    
    ! Pre-calculate inverses
    invB1 = one/b1
    invB2 = one/b2

    nItt   = 0
    maxItt = 1000000
    do
        nItt = nItt + 1
        call ranecu(rndArr, 3, -1)

        ! Randomly switch between g1 and g3 according to probability
        if(rndArr(1) .gt. prob3) then
            t = tmin - invB1*log_mb(rndArr(2))
        else
            t = tmin - invB2*log_mb(rndArr(2))
        end if
        
        ! Exact distribution
        g1 =             exp_mb(-b1*t)                              ! Soft scatter term
        g2 =  ((two*a) * exp_mb(((-half)*(b1+b2))*t)) * cos_mb(phi) ! Interference
        g3 =    (a**2) * exp_mb(-b2*t)                              ! Hard scatter term
        gg = ((g1+g2)+g3)/(g1+g3)
        
        ! Check hit/miss on exact distribution
        ! if miss, get new t value
        ! if too many attempts, exit
        if(rndArr(3) .lt. gg .or. nItt .gt. maxItt) exit
    end do

    if(nItt .gt. maxItt) then
        write(lout,*) "SCATTER> ERROR in generator PPBEAMELASTIC"
        write(lout,*) "Limit of", maxItt, "misses in generator loop reached."
        call prror(-1)
    end if

end function scatter_generator_getPPElastic

end module scatter
