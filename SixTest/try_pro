#!/bin/sh
#
if test $# -ne 3
then
  echo "try_pro called without 3 parameters!!!"
  exit 1
fi
sixdir=$1
sixv=$2
dir=$3
BNL=""
echo "$sixv" | grep '_bnl' > /dev/null
if test $? -eq 0
then
  BNL="bnl"
else
  TESTS=`echo $TESTS | sed -e's/bnl//'`
  echo "Ignoring TEST bnl as this executable does not handle bnlelens."
fi
BOINC=""
echo $sixv | grep '_boinc' >/dev/null
if test $? -eq 0
then
  BOINC="BOINC"
fi
CPSS=""
echo $sixv | grep '_cpss' >/dev/null
if test $? -eq 0
then
  CPSS="CPSS"
fi
CR=""
echo $sixv | grep '_cr_' >/dev/null
if test $? -eq 0
then
  CR="CR"
fi
date
echo "===================================="
echo "Testing Version $sixv in $sixdir"
echo "===================================="
echo "=== `hostname` ==="
egrep 'model name' /proc/cpuinfo | head -1
egrep 'cpu MHz' /proc/cpuinfo | head -1
egrep 'cache size' /proc/cpuinfo | head -1
esize=`size -d $sixdir/$sixv|sed -e'/dec/d' -e's/\t/ /g' -e's/  */ /'|cut -d" " -f1-4`
echo ""
echo "Size of $sixv $esize"
for i in $TESTS
do
  echo "===================================="
  echo "Testing CASE $i"
  echo "===================================="
  echo "=== $dir ==="
  rm -f fort.*
  for j in 2 3 8 16
  do
    cp ../$i/fort.$j fort.$j
  done
  if test "$i" = "bnl"
  then
    cp ../$i/beambeamdist.dat beambeamdist.dat
    cp beambeamdist.dat fort.54
  fi
  
  echo "First (only) time pro with no checkpoints"
  date
  time $sixdir/$sixv > fort.6 2>&1 
  date
  egrep 'Computing Time|Total Time' fort.6
  ls -l
  
  cp fort.6 ../$i/fort.6.$dir
  cp fort.10 ../$i/fort.10.$dir
  if test -s fort.110
  then
    cp fort.110 ../$i/fort.110.$dir
  fi
  if test -s fort.90
  then
    cp fort.90 ../$i/fort.90.$dir
  fi
  if test -s fort.210
  then
    cp fort.210 ../$i/fort.210.$dir
  fi
  
  if test "$i" = "bnl"
  then
    if test "$CPSS" != "" -o "$CR" != ""
    then
      cp fort.10 ../$i/title.dat.$dir
      cp fort.52 ../$i/beambeam-output.dat.$dir
      cp fort.53 ../$i/beambeam-lostID.dat.$dir
      cp fort.51 ../$i/SixTwiss.dat.$dir
      cp fort.97 ../$i/checkdist.dat.$dir
    elif test "$BOINC" != ""
    then
      egrep 'title     ' fort.10 > tmp$$
      sed -e's/title     //' tmp$$ > ../$i/title.dat.$dir
      egrep 'output    ' fort.10 > tmp$$
      sed -e's/output    //' tmp$$ > ../$i/beambeam-output.dat.$dir
      egrep 'lostID    ' fort.10 tmp$$ > tmp$$
      sed -e's/lostID    //' tmp$$ > ../$i/beambeam-lostID.dat.$dir
      egrep 'checkdist ' fort.10 > tmp$$
      sed -e's/checkdist //' tmp$$ > ../$i/checkdist.dat.$dir
      egrep 'SixTwiss  ' fort.10 > tmp$$
      sed -e's/SixTwiss  //' tmp$$ > ../$i/SixTwiss.dat.$dir
      rm tmp$$
    else
      cp fort.10 ../$i/title.dat.$dir
      cp beambeam-output.dat ../$i/beambeam-output.dat.$dir
      cp beambeam-lostID.dat ../$i/beambeam-lostID.dat.$dir
      cp SixTwiss.dat ../$i/SixTwiss.dat.$dir
      cp checkdist.dat ../$i/checkdist.dat.$dir
    fi
  fi
  
  if test -s ../$i/extra_checks.txt; then
      echo "Found extra_checks.txt, copying more files..."
      set -f #Disable wildcard expansion
      while read checkfile command; do
	  echo "   Got file :: command = " $checkfile :: $command
	  if test ! "$checkfile" -o ! "$command" ; then
	      echo "      Invalid line! Skipping."
	      continue
	  fi

	  if ! test -f $checkfile ; then
	      echo "      File '$checkfile' not found, skipping!"
	  fi
	  
	  #echo "   Copying file '"$checkfile"':"
	  cp $checkfile ../$i/$checkfile.$dir
	  
      done < ../$i/extra_checks.txt
      set +f #Renable wildcards (glob)
  else
      echo "No extra_checks.txt was found."
  fi
done
